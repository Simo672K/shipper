// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DISPATCHER
  DRIVER
  SHIPPER
}

enum Status {
  PENDING
  IN_PROGRESS
  FINISHED
  REJECTED
}

model Access {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role    Role
  Profile Profile?
}

model User {
  id             String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  email          String
  phoneNumber    String
  address        Address?
  hashedPassword String
  verified       Boolean
  isActive       Boolean
  placedOrder    TripOrder[]
  assignedOrder  TripOrderAssigned[]
  createdAt      DateTime
  lastLogin      DateTime
}

model Profile {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  Access  Access @relation(fields: [role_id], references: [id])
  role_id String @unique @db.Uuid
}

model Address {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?    @unique @db.Uuid
  name       String
  street     String
  postalCode String
  city       String
  lang       Float
  lat        Float
  tripStart  TripOrder? @relation("startLocation")
  tripEnd    TripOrder? @relation("endLocation")
  createdAt  DateTime
}

model TripPack {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  discription String @db.Text
  pricing     Float
  typeVehicle String
}

model TripOrder {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignedToUser TripOrderAssigned?
  fromAddress    Address?           @relation("startLocation", fields: [fromAddressId], references: [id])
  fromAddressId  String?            @unique @db.Uuid
  toAddress      Address?           @relation("endLocation", fields: [toAddressId], references: [id])
  toAddressId    String?            @unique @db.Uuid
  PlacedByUser   User               @relation(fields: [placedBy], references: [id])
  placedBy       String             @unique @db.Uuid
  status         Status             @default(PENDING)
  createdAt      DateTime
}

model TripOrderAssigned {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  TripOrder TripOrder @relation(fields: [orderId], references: [id])
  orderId   String    @unique @db.Uuid

  AssignedTo User   @relation(fields: [assignedTo], references: [id])
  assignedTo String @unique @db.Uuid
}

// model Vehicle {
//   id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

// }
